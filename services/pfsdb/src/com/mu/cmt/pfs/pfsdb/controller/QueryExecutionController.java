/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbQueryExecutorService;
import com.mu.cmt.pfs.pfsdb.models.query.*;

@RestController(value = "Pfsdb.QueryExecutionController")
@RequestMapping("/pfsdb/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private PfsdbQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/QryDelDN", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Delete DN(details) when DN is removed from main.")
    public IntegerWrapper executeQryDelDN(@RequestParam(value = "pDDelNum", required = false) String pddelNum, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryDelDN");
        Integer _result = queryService.executeQryDelDN(pddelNum);
        LOGGER.debug("got the result for named query: QryDelDN, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/QryDefEmpcode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QryDefEmpcode")
    public QryDefEmpcodeResponse executeQryDefEmpcode(@RequestParam(value = "p_usrid", required = false) String pusrid, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryDefEmpcode");
        QryDefEmpcodeResponse _result = queryService.executeQryDefEmpcode(pusrid);
        LOGGER.debug("got the result for named query: QryDefEmpcode, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/QryDyejobFabRoutes", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QryDyejobFabRoutes")
    public Page<QryDyejobFabRoutesResponse> executeQryDyejobFabRoutes(@RequestParam(value = "dyejob", required = false) String dyejob, @RequestParam(value = "fabseq", required = false) String fabseq, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryDyejobFabRoutes");
        Page<QryDyejobFabRoutesResponse> _result = queryService.executeQryDyejobFabRoutes(dyejob, fabseq, pageable);
        LOGGER.debug("got the result for named query: QryDyejobFabRoutes, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryDyejobFabRoutes")
    @RequestMapping(value = "/queries/QryDyejobFabRoutes/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryDyejobFabRoutes(@RequestParam(value = "dyejob", required = false) String dyejob, @RequestParam(value = "fabseq", required = false) String fabseq, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryDyejobFabRoutes");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryDyejobFabRoutes";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryDyejobFabRoutes(dyejob, fabseq,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QrySy9200pk0CallWmakerapp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QrySy9200pk0CallWmakerapp")
    public QrySy9200pk0callWmakerappResponse executeQrySy9200pk0CallWmakerapp(@RequestParam(value = "pWmprogid", required = false) String pwmprogid, @RequestParam(value = "pParamList", required = false) String pparamList, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QrySy9200pk0CallWmakerapp");
        QrySy9200pk0callWmakerappResponse _result = queryService.executeQrySy9200pk0CallWmakerapp(pwmprogid, pparamList);
        LOGGER.debug("got the result for named query: QrySy9200pk0CallWmakerapp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qyProcessCQRadioset2Values", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "qyProcessCQRadioset2Values")
    public Page<QyProcessCqradioset2valuesResponse> executeQyProcessCQRadioset2Values(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qyProcessCQRadioset2Values");
        Page<QyProcessCqradioset2valuesResponse> _result = queryService.executeQyProcessCQRadioset2Values(pageable);
        LOGGER.debug("got the result for named query: qyProcessCQRadioset2Values, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qyProcessCQRadioset2Values")
    @RequestMapping(value = "/queries/qyProcessCQRadioset2Values/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQyProcessCQRadioset2Values(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qyProcessCQRadioset2Values");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qyProcessCQRadioset2Values";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQyProcessCQRadioset2Values( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qyProcessCQRadiosetValues", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query to return Process CQ Radio set 1 Values")
    public Page<QyProcessCqradiosetValuesResponse> executeQyProcessCQRadiosetValues(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qyProcessCQRadiosetValues");
        Page<QyProcessCqradiosetValuesResponse> _result = queryService.executeQyProcessCQRadiosetValues(pageable);
        LOGGER.debug("got the result for named query: qyProcessCQRadiosetValues, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qyProcessCQRadiosetValues")
    @RequestMapping(value = "/queries/qyProcessCQRadiosetValues/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQyProcessCQRadiosetValues(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qyProcessCQRadiosetValues");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qyProcessCQRadiosetValues";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQyProcessCQRadiosetValues( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QrySignOffReldoubtDyeJobFabRoute", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "used only in Sign-off Release Doubtful and Reject.")
    public Page<QrySignOffReldoubtDyeJobFabRouteResponse> executeQrySignOffReldoubtDyeJobFabRoute(@RequestParam(value = "dyejob", required = false) String dyejob, @RequestParam(value = "fabseq", required = false) Integer fabseq, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QrySignOffReldoubtDyeJobFabRoute");
        Page<QrySignOffReldoubtDyeJobFabRouteResponse> _result = queryService.executeQrySignOffReldoubtDyeJobFabRoute(dyejob, fabseq, pageable);
        LOGGER.debug("got the result for named query: QrySignOffReldoubtDyeJobFabRoute, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QrySignOffReldoubtDyeJobFabRoute")
    @RequestMapping(value = "/queries/QrySignOffReldoubtDyeJobFabRoute/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQrySignOffReldoubtDyeJobFabRoute(@RequestParam(value = "dyejob", required = false) String dyejob, @RequestParam(value = "fabseq", required = false) Integer fabseq, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QrySignOffReldoubtDyeJobFabRoute");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QrySignOffReldoubtDyeJobFabRoute";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQrySignOffReldoubtDyeJobFabRoute(dyejob, fabseq,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryEmployeeCodeSignOff", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QryEmployeeCodeSignOff")
    public Page<QryEmployeeCodeSignOffResponse> executeQryEmployeeCodeSignOff(@RequestParam(value = "p_usrid", required = false) String pusrid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryEmployeeCodeSignOff");
        Page<QryEmployeeCodeSignOffResponse> _result = queryService.executeQryEmployeeCodeSignOff(pusrid, pageable);
        LOGGER.debug("got the result for named query: QryEmployeeCodeSignOff, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryEmployeeCodeSignOff")
    @RequestMapping(value = "/queries/QryEmployeeCodeSignOff/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryEmployeeCodeSignOff(@RequestParam(value = "p_usrid", required = false) String pusrid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryEmployeeCodeSignOff");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryEmployeeCodeSignOff";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryEmployeeCodeSignOff(pusrid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryFabseqLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "fetch fabseq for weight that can be updated")
    public Page<QryFabseqLovResponse> executeQryFabseqLOV(@RequestParam(value = "pdyejob", required = false) String pdyejob, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryFabseqLOV");
        Page<QryFabseqLovResponse> _result = queryService.executeQryFabseqLOV(pdyejob, pageable);
        LOGGER.debug("got the result for named query: QryFabseqLOV, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryFabseqLOV")
    @RequestMapping(value = "/queries/QryFabseqLOV/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryFabseqLOV(@RequestParam(value = "pdyejob", required = false) String pdyejob, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryFabseqLOV");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryFabseqLOV";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryFabseqLOV(pdyejob,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QrySignOffRejectDyeJobFabRoute", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QrySignOffRejectDyeJobFabRoute")
    public Page<QrySignOffRejectDyeJobFabRouteResponse> executeQrySignOffRejectDyeJobFabRoute(@RequestParam(value = "dyejob", required = false) String dyejob, @RequestParam(value = "fabseq", required = false) Integer fabseq, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QrySignOffRejectDyeJobFabRoute");
        Page<QrySignOffRejectDyeJobFabRouteResponse> _result = queryService.executeQrySignOffRejectDyeJobFabRoute(dyejob, fabseq, pageable);
        LOGGER.debug("got the result for named query: QrySignOffRejectDyeJobFabRoute, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QrySignOffRejectDyeJobFabRoute")
    @RequestMapping(value = "/queries/QrySignOffRejectDyeJobFabRoute/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQrySignOffRejectDyeJobFabRoute(@RequestParam(value = "dyejob", required = false) String dyejob, @RequestParam(value = "fabseq", required = false) Integer fabseq, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QrySignOffRejectDyeJobFabRoute");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QrySignOffRejectDyeJobFabRoute";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQrySignOffRejectDyeJobFabRoute(dyejob, fabseq,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryCheckEmpcode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QryCheckEmpcode")
    public QryCheckEmpcodeResponse executeQryCheckEmpcode(@RequestParam(value = "p_usrid", required = false) String pusrid, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryCheckEmpcode");
        QryCheckEmpcodeResponse _result = queryService.executeQryCheckEmpcode(pusrid);
        LOGGER.debug("got the result for named query: QryCheckEmpcode, result:{}", _result);
        return _result;
    }

}